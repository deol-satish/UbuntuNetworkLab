Router:::::
This allows the router to forward packets between its two interfaces.
sudo sysctl -w net.ipv4.ip_forward=1

To make it persistent:
echo "net.ipv4.ip_forward = 1" | sudo tee -a /etc/sysctl.conf

Then apply:
sudo sysctl -p

sudo hostnamectl set-hostname ubsrouter

network:
  version: 2
  renderer: networkd
  ethernets:
    ens33:
      dhcp4: no
      addresses: [192.168.11.140/24]
      nameservers:
        addresses: [8.8.8.8]
      routes:
        - to: 0.0.0.0/0
          via: 192.168.11.2
    ens37:
      dhcp4: no
      addresses: [192.168.1.1/24]
    ens38:
      dhcp4: no
      addresses: [192.168.2.1/24]

cat /etc/netplan/01-netcfg.yaml
sudo mkdir -p /etc/cloud/cloud.cfg.d
echo "network: {config: disabled}" | sudo tee /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
sudo rm /etc/netplan/50-cloud-init.yaml
sudo nano /etc/netplan/01-netcfg.yaml
sudo netplan apply

server:::::::
sudo hostnamectl set-hostname ubsserver

network:
  version: 2
  renderer: networkd
  ethernets:
    ens33:
      dhcp4: no
      addresses: [192.168.11.141/24]
      nameservers:
        addresses: [8.8.8.8]
      routes:
        - to: 0.0.0.0/0
          via: 192.168.11.2
    ens37:
      dhcp4: no
      addresses: [192.168.2.2/24]


client1:::::::
sudo hostnamectl set-hostname ubsclient1
network:
  version: 2
  renderer: networkd
  ethernets:
    ens33:
      dhcp4: no
      addresses: [192.168.11.142/24]
      nameservers:
        addresses: [8.8.8.8]
      routes:
        - to: 0.0.0.0/0
          via: 192.168.11.2
    ens37:
      dhcp4: no
      addresses: [192.168.1.2/24]

network:
  version: 2
  renderer: networkd
  ethernets:
    ens33:
      addresses: [192.168.11.142/24]
      nameservers:
        addresses: [8.8.8.8]
      routes:
        - to: 0.0.0.0/0
          via: 192.168.11.2
    ens37:
      addresses: [192.168.1.2/24]
      routes:
        - to: 192.168.0.0/32

client2:::::::
sudo hostnamectl set-hostname ubsclient2
network:
  version: 2
  renderer: networkd
  ethernets:
    ens33:
      dhcp4: no
      addresses: [192.168.11.143/24]
      nameservers:
        addresses: [8.8.8.8]
      routes:
        - to: 0.0.0.0/0
          via: 192.168.11.2
    ens37:
      dhcp4: no
      addresses: [192.168.1.3/24]

network:
  version: 2
  renderer: networkd
  ethernets:
    ens33:
      addresses: [192.168.11.143/24]
      nameservers:
        addresses: [8.8.8.8]
      routes:
        - to: 0.0.0.0/0
          via: 192.168.11.2
    ens37:
      addresses: [192.168.1.3/24]
      routes:
        - to: 192.168.0.0/32




================================================================================================
Finally,:
Thanks for confirming. Since **each client and the server are on different subnets**, and they’re only directly connected to the **router**, we need to:

---

## ✅ Add **Static Routes** on Each VM (Clients + Server)

This ensures that traffic to the **other subnet** is **explicitly sent via the router**.

---

### ✅ On **Client 1** (`192.168.1.2`)

```bash
sudo ip route add 192.168.2.0/24 via 192.168.1.1 dev ens37
```

---

### ✅ On **Client 2** (`192.168.1.3`)

```bash
sudo ip route add 192.168.2.0/24 via 192.168.1.1 dev ens37
```

---

### ✅ On **Server** (`192.168.2.2`)

```bash
sudo ip route add 192.168.1.0/24 via 192.168.2.1 dev ens38
```

---

## 📌 To make them **persistent after reboot**, you can:

1. Create a file like `/etc/networkd-dispatcher/routable.d/10-add-static-routes.sh`
2. Add:

   ```bash
   #!/bin/bash
   ip route add 192.168.1.0/24 via 192.168.2.1 dev ens38  # for server
   ```

   (Use correct command per VM)
3. Make it executable:

   ```bash
   sudo chmod +x /etc/networkd-dispatcher/routable.d/10-add-static-routes.sh
   ```

---

### 🔁 Now test:

From **Client 1**:

```bash
ping 192.168.2.2
```

From **Server**:

```bash
ping 192.168.1.2
```

Let me know if you’d prefer using `netplan` YAML to make static routes persistent instead.
